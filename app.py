import streamlit as st
import torch
from PIL import Image
from datetime import datetime
import os
import pathlib
from fastai.vision.all import load_learner
import cv2
#if os.name == 'nt':
#    pathlib.PosixPath = pathlib.WindowsPath

def load_models():
    GOOD_OR_BAD = pathlib.Path("models/good_or_bad.pkl")
    good_or_bad = load_learner(GOOD_OR_BAD)
    detection_model = torch.hub.load('ultralytics/yolov5', 'custom', path='models/best.pt', force_reload=True)
    return good_or_bad, detection_model

def predict_image(good_or_bad, detection_model, imgpath, outputpath):
    checkleaf = good_or_bad.predict(imgpath)
    if checkleaf[0] == 'good':
        detection_model.cpu()
        pred = detection_model(imgpath)
        pred.render()  # render bbox in image
        for im in pred.ims:
            im_base64 = Image.fromarray(im)
            im_base64.save(outputpath)
        return True, pred, outputpath
    else:
        return False, None, None

def display_predictions(col2, pred, outputpath, description):
    img_ = Image.open(outputpath)
    with col2:
        st.image(img_, caption='Model Prediction', use_column_width='always')
    
    # Check for specific diseases in the predictions
    labels = pred.names
    detected_diseases = set()
    for *box, conf, cls in pred.xyxy[0]:
        label = labels[int(cls)]
        if label == 'frog_eye' and 'frog_eye' not in detected_diseases:
            st.markdown(f"<div style='background:#FF6F61;padding:0 20px 0 20px;border-radius:10px 10px 0 0;'><h1 style='color:#000000'>‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏Å‡∏ö</h1></div>", unsafe_allow_html=True)
            st.markdown(f"<div style='background:none;padding:30px;border-radius:0 0 10px 10px;border:2px solid #FF6F61'>{description[0]}</div>", unsafe_allow_html=True)
            detected_diseases.add('frog_eye')
        elif label == 'yellow_leaf' and 'yellow_leaf' not in detected_diseases:
            st.markdown(f"<div style='background:#FF6F61;padding:0 20px 0 20px;border-radius:10px 10px 0 0;'><h1 style='color:#000000'>‡πÉ‡∏ö‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á</h1></div>", unsafe_allow_html=True)
            st.markdown(f"<div style='background:none;padding:30px;border-radius:0 0 10px 10px;border:2px solid #FF6F61'>{description[1]}</div>", unsafe_allow_html=True)
            detected_diseases.add('yellow_leaf')

def imageInput(device, src, good_or_bad, detection_model):
    enter = False
    description = [
        """‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏Å‡∏ö (frog_eye) ‡∏à‡∏∞‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÉ‡∏ô‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡∏™‡∏π‡∏ö ‡∏à‡∏∏‡∏î‡πÅ‡∏ú‡∏•‡∏à‡∏∞‡∏Å‡∏•‡∏° ‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ú‡∏•‡∏°‡∏µ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏•‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡πÅ‡∏ú‡∏•‡∏à‡∏∞‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÇ‡∏£‡∏Ñ‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏ã‡∏≠‡πÇ‡∏Ñ‡∏™‡∏∞‡∏õ‡∏≠‡∏£‡πà‡∏≤ (Cercospora) ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏≠‡∏ô‡πÅ‡∏ó‡∏£‡∏Ñ‡πÇ‡∏ô‡∏™‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏•‡∏≠‡πÇ‡∏£‡∏ò‡∏≤‡πÇ‡∏£‡∏ô‡∏¥‡∏• (chlorothalonil) ‡∏â‡∏µ‡∏î‡∏û‡πà‡∏ô‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏Ç‡∏ì‡∏∞‡∏£‡∏∞‡∏ö‡∏≤‡∏î ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏î‡∏µ""",
        """‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á (yellow_leaf) ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ö‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏î‡∏¥‡∏ô‡∏™‡∏π‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏¥‡∏ô‡πÅ‡∏ô‡πà‡∏ô ‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏¢‡∏≤‡∏Å ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ ‡∏ï‡∏±‡∏î‡πÉ‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏õ ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡πÑ‡∏õ‡∏™‡∏±‡∏Å‡∏£‡∏∞‡∏¢‡∏∞ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏£‡∏î‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏¥‡∏ô‡πÅ‡∏´‡πâ‡∏á ‡πÄ‡∏ä‡πá‡∏Å‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ô‡∏¥‡πâ‡∏ß‡∏Å‡∏î‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô‡∏î‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡∏ô‡∏¥‡πâ‡∏ß ‡∏´‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏î‡∏¥‡∏ô‡πÅ‡∏´‡πâ‡∏á‡∏Å‡πá‡∏£‡∏î‡∏ô‡πâ‡∏≥‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏î‡∏¥‡∏ô‡∏¢‡∏±‡∏á‡πÅ‡∏â‡∏∞‡∏Å‡πá‡∏Ñ‡∏ß‡∏£‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô"""
    ]

    if src == '‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì':
        image_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û", type=['png', 'jpeg', 'jpg'])
        col1, col2 = st.columns(2)
        if image_file is not None:
            img = Image.open(image_file)
            with col1:
                st.image(img, caption='Uploaded Image', use_column_width='always')
            ts = datetime.timestamp(datetime.now())
            imgpath = os.path.join('data/uploads', str(ts) + image_file.name)
            outputpath = os.path.join('data/outputs', os.path.basename(imgpath))
            with open(imgpath, mode="wb") as f:
                f.write(image_file.getbuffer())
            # call Model prediction--
            success, pred, outputpath = predict_image(good_or_bad, detection_model, imgpath, outputpath)
            if success:
                display_predictions(col2, pred, outputpath, description)
            else:
                st.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
    elif src == '‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå':
        test_images = os.listdir('data/images/')
        test_image = st.selectbox('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:', test_images)
        image_file = 'data/images/' + test_image
        submit = st.button("Predict!")
        col1, col2 = st.columns(2)
        with col1:
            img = Image.open(image_file)
            st.image(img, caption='Selected Image', use_column_width='always')
        if image_file is not None and submit:
            success, pred, outputpath = predict_image(good_or_bad, detection_model, image_file, os.path.join('data/outputs', os.path.basename(image_file)))
            if success:
                display_predictions(col2, pred, outputpath, description)
                enter = True
        
def main():
    # -- Sidebar
    st.sidebar.title('‚öôÔ∏èOptions')
    datasrc = st.sidebar.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û", ['‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå', '‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'])

    # option = st.sidebar.radio("Select input type.", ['Image', 'Video'])
    if torch.cuda.is_available():
        deviceoption = st.sidebar.radio("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", ['cpu'], index=1)
    else:
        deviceoption = st.sidebar.radio("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", ['cpu'], index=0)
    # -- End of Sidebar

    st.header('üå∂Ô∏è Chili Detection Model')
    st.subheader('‚öôÔ∏èSelect options')

    good_or_bad, detection_model = load_models()
    imageInput(deviceoption, datasrc, good_or_bad, detection_model)

if __name__ == '__main__':
    main()
